#
# ~/.bashrc
#

# OS dependent config
OS=$(uname)
if [ "$OS" = Linux ]; then
  alias ls='ls --color=auto'

  shopt -s direxpand

  #export TERM="screen-256color"
elif [ "$OS" = Darwin ]; then
  alias ls='ls -G' # color

  #[ -f /usr/local/bin/brew ] && PATH="/usr/local/bin:/usr/local/sbin:$PATH"
fi

alias ..='cd ..'

alias dudot='du -hd 1'

alias ll='ls -Alh'
alias lsa='ls -A' # -A means ignore '.' & '..'

alias g=git
alias gs='git status'
alias gb='git branch'
alias gupdate='git add . && git commit --amend'

alias grepi='grep -i'

# Text editors
alias emacs='emacs -nw' # default to console-based emacs

PS1='\w\$ '

function add_to_path_if_not_present {
  local path="$1"
  [ ! -d "$path" ] && return
  # The second argument is optional, but will speed up this function
  local paths="${2:-$(echo "$PATH" | tr : '\n')}"
  echo "$paths" | grep --fixed-string --line-regexp "$dir" >/dev/null
  # Add $dir to $PATH if it does not yet appear
  [ "$?" -ne 0 ] && PATH="$dir:$PATH"
}

if type nvim >/dev/null 2>&1; then
  export VISUAL=nvim
elif type vim >/dev/null 2>&1; then
  export VISUAL=vim
elif type vi >/dev/null 2>&1; then
  export VISUAL=vi
else
  echo "You don't have a vi-compliant editor!"
  exit 1
fi

export EDITOR=$VISUAL

# initialize BASE16 w/output in subshell
# shellcheck source=/dev/null
[ -f "$HOME/.config/base16-shell/profile_helper.sh" ] && eval "$("$HOME/.config/base16-shell/profile_helper.sh")"

[ -d "$HOME/notes" ] && export NOTES="$HOME/notes"
if [ -d "$HOME/git" ]; then
  export GIT="$HOME/git"
  [ -d "$GIT/dotfiles" ] && export DOTFILES="$GIT/dotfiles"
  if [ -d "$GIT/flutter" ]; then
    export FLUTTER="$GIT/flutter"
    export DART_SDK="$FLUTTER/bin/cache/dart-sdk"
    alias dart-analysis-server="$DART_SDK/bin/dart $DART_SDK/bin/snapshots/analysis_server.dart.snapshot --lsp"
  fi
fi

# golang dev

[ -d "$HOME/go" ] && export GOPATH="$HOME/go"

# add dirs to path, if they exist
dirs=(
  "$HOME/scripts"
  "$HOME/bin"
  "$HOME/go/bin"
  "$HOME/.node_modules/bin"
  "$HOME/.nvm"
  "$HOME/.pub-cache/bin"
  "$HOME/git/depot_tools"
  "$HOME/.cargo/bin"
  "$HOME/Library/Python/2.7/bin"
  "$HOME/.local/bin" # pip3?
  "$HOME/flutter_goma"
  #"$HOME/.rvm/bin"
)

paths=$(echo "$PATH" | tr : '\n')
for dir in "${dirs[@]}"; do
  add_to_path_if_not_present "$dir" "$paths"
done

# source config files, if they exist
files=(
  /usr/local/opt/nvm/nvm.sh
  "$HOME/.fzf.bash"
  /usr/local/etc/bash_completion
  "$HOME/.rvm/scripts/rvm"
  "$HOME/.flutter-completion"
)

for i in "${files[@]}"; do
  # shellcheck source=/dev/null
  [ -f "$i" ] && source "$i"
done

# if ruby dev env set...
if type gem >/dev/null 2>&1; then
  if type rbenv >/dev/null 2>&1; then
    eval "$(rbenv init -)"
    add_to_path_if_not_present "$HOME/.rbenv/bin"
  fi

  add_to_path_if_not_present "$(ruby -e 'print Gem.user_dir')/bin"

  alias rrg='rake routes | grep -i'
fi

if type lesspipe.sh >/dev/null 2>&1; then
  export LESS=-r
  export LESSOPEN="|lesspipe.sh %s"
fi

# fzf
if type fzf >/dev/null 2>&1; then
  alias checkout="git branch --list | sed 's/^\*/ /' | fzf | xargs git checkout"
  alias branchd="git branch --list | sed -E 's/^[ *]+//' | fzf --multi | xargs git branch -d --force"
else
  echo "Warning! fzf not installed, and it's awesome!"
fi

# source local-machine specific config if it exists
# shellcheck source=/dev/null
[ -f "$HOME/.bashrc.local" ] && source "$HOME/.bashrc.local"

function count_duplicate_path_entries {
  COUNT=$(echo "$PATH" | tr : '\n' | sort | uniq -d | wc -l)
  if [ "$COUNT" -gt 0 ]; then
    echo 'Warning! You have duplicate entries in your PATH:'
    echo "$PATH" | tr : '\n' | sort | uniq -d
  fi
}

function detect_autogenerated_lines {
  CURRENT_SCRIPT_NAME="${BASH_SOURCE[0]}"
  LAST_LINE=$(tail -n 1 "$CURRENT_SCRIPT_NAME")
  if [ "$LAST_LINE" != '# Anything after here was auto-generated' ]; then
    echo "Warning! The following has been appended to the end of ${CURRENT_SCRIPT_NAME}:"
    echo
    tput setaf 1
    perl -e 'print reverse <>' <"$CURRENT_SCRIPT_NAME" | sed -n '1,/Anything after here was auto-generated/p' | perl -e 'print reverse <>'

    tput sgr0
  fi
}

export PATH

count_duplicate_path_entries
detect_autogenerated_lines

# Anything after here was auto-generated
